// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
@import 'variables/palette';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();


// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$frontend-primary: mat.define-palette($ds-primary-material, 400);
$frontend-accent: mat.define-palette(mat.$green-palette, A400);

// The warn palette is optional (defaults to red).
$frontend-warn: mat.define-palette(mat.$red-palette);
$my-typography: mat.define-typography-config();
// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$frontend-theme: mat.define-light-theme((color: (primary: $frontend-primary,
        accent: $frontend-accent,
        warn: $frontend-warn,
      ),
      typography: $my-typography,
    ));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($frontend-theme);

:root {

  --gap-small: 15px;
  --gap-medium: 20px;
  --gap-big: 25px;
}

/* You can add global styles to this file, and also import other style files */
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

html,
body {
  min-height: 100%;
  background-color: map-get($map: $ds-utils, $key: background-color);
  color: map-get($map: $ds-utils, $key: font-color);
}

body {
  margin: 0;
  font-family: 'Space Grotesk', sans-serif;
  font-family: 'Roboto Slab', serif;
  font-size: 14px;
}

.cursor-pointer {
  cursor: pointer;
}

a {
  margin-bottom: 5px;
  color: var(--color-primary);

  &:visited {
    color: var(--color-primary);
  }
}

*::-webkit-scrollbar {
  width: 8px;
  /* width of the entire scrollbar */
}

*::-webkit-scrollbar-track {
  background: transparent;
  /* color of the tracking area */
}

*::-webkit-scrollbar-thumb {
  background-color: #393d45;
  /* color of the scroll thumb */
  border-radius: 20px;
  /* roundness of the scroll thumb */
  /* creates padding around scroll thumb */
}

.mat-mdc-snack-bar-container {
  &.error-snackbar {
    --mdc-snackbar-container-color: var(--color-error);
    --mat-mdc-snack-bar-button-color: #fff;
    --mdc-snackbar-supporting-text-color: #fff;
  }

  &.success-snackbar {
    --mdc-snackbar-container-color: var(--color-success);
    --mat-mdc-snack-bar-button-color: #fff;
    --mdc-snackbar-supporting-text-color: #fff;
  }
}

.mat-mdc-raised-button:not(:disabled) {
  color: white !important;
}

//directive-styles 
.ds__button {
  font-size: 16px;
  min-width: 150px;
  padding: 8px 22px;
  position: relative;
  font-family: 'Space Grotesk', sans-serif;
  color: map-get($map: $ds-utils, $key: font-color);
  border-radius: 0;
  border: 0;
  background-color: map-get($map: $ds-grey, $key: 300);
  transition: background-color .2s ease-in-out;

  &:disabled {
    background-color: transparent !important;

    &:hover {
      background-color: transparent !important;
      cursor: default;
      pointer-events: none;
    }
  }

  &:hover {
    cursor: pointer;
    background-color: map-get($map: $ds-grey, $key: 400);
  }

  &::after,
  &::before {
    content: '';
    position: absolute;
    width: calc(100% + 4px);
    height: calc(100% + 4px);
    top: -4px;
    left: -4px;
    border-radius: 0;
  }

  &::before {
    left: 0;
    top: -4px;
    transition: clip-path .2s ease-in-out;
    background-color: #fff;
  }

  &::after {
    content: '';
    position: absolute;
    width: calc(100% + 4px);
    height: calc(100% + 4px);
    top: -4px;
    left: -4px;
    border-radius: 0;
    // background-color: #fff;
    border: 2px solid white;
    transition: clip-path .3s ease-in-out;
  }
}

.ds__button__primary {
  background-color: map-get($map: $ds-primary, $key: 200);

  &:hover {
    background-color: map-get($map: $ds-primary, $key: 300);
  }
}

.ds__button__secondary {
  background-color: map-get($map: $ds-secondary, $key: 200);

  &:hover {
    background-color: map-get($map: $ds-secondary, $key: 300);
  }
}

.ds__button__warn {
  background-color: map-get($map: $ds-danger, $key: 200);

  &:hover {
    background-color: map-get($map: $ds-danger, $key: 300);
  }
}

.ds__button__success {
  background-color: map-get($map: $ds-success, $key: 200);

  &:hover {
    background-color: map-get($map: $ds-success, $key: 300);
  }
}

.ds__button__top-right {
  &:hover {
    &::after {
      -webkit-clip-path: polygon(100% 0, 100% 25%, 100% 100%, 0 100%, 0 0);
      clip-path: polygon(100% 0, 100% 30%, 100% 100%, 0 100%, 0 0);
    }

    &::before {
      -webkit-clip-path: polygon(100% 0, 100% 0, 100% 0, 100% 0);
      clip-path: polygon(100% 0, 100% 0, 100% 0, 100% 0);
    }
  }

  &::before {
    -webkit-clip-path: polygon(calc(75% - 3px) 0, calc(75% + 3px) 0, 100% 30%, 100% calc(30% + 2px));
    clip-path: polygon(calc(75% - 3px) 0, calc(75% + 3px) 0, 100% 30%, 100% calc(30% + 2px));
  }

  &::after {
    -webkit-clip-path: polygon(75% 0, 100% 25%, 100% 100%, 0 100%, 0 0);
    clip-path: polygon(75% 0, 100% 30%, 100% 100%, 0 100%, 0 0);
  }
}

.ds__button__top-left {
  &:hover {
    &::after {
      -webkit-clip-path: polygon(25% 0, 100% 0, 100% 100%, 0 100%, 0 0);
      clip-path: polygon(25% 0, 100% 0, 100% 100%, 0 100%, 0 0);
    }

    &::before {
      -webkit-clip-path: polygon(0 0, 0 0, 0 0, 0 0);
      clip-path: polygon(0 0, 0 0, 0 0, 0 0);
    }
  }

  &::before {
    left: -4px;
    top: -4px;
    -webkit-clip-path: polygon(calc(25% - 3px) 0, calc(25% + 3px) 0, 0% calc(30% + 2px), 0% 30%);
    clip-path: polygon(calc(25% - 3px) 0, calc(25% + 3px) 0, 0% calc(30% + 2px), 0% 30%);
  }

  &::after {
    -webkit-clip-path: polygon(25% 0, 100% 0, 100% 100%, 0 100%, 0 30%);
    clip-path: polygon(25% 0, 100% 0, 100% 100%, 0 100%, 0 30%);
  }
}

.ds__button__bottom-right {
  &:hover {
    &::after {
      -webkit-clip-path: polygon(100% 0, 100% 100%, 80% 100%, 0 100%, 0 0);
      clip-path: polygon(100% 0, 100% 100%, 80% 100%, 0 100%, 0 0);
    }

    &::before {
      -webkit-clip-path: polygon(100% 100%, 100% 100%, 100% 100%, 100% 100%);
      clip-path: polygon(100% 100%, 100% 100%, 100% 100%, 100% 100%);
    }
  }

  &::before {
    left: 0px;
    top: 0px;
    -webkit-clip-path: polygon(100% 70%, 100% calc(70% + 2px), calc(75% - 3px) 100%, calc(75% + 3px) 100%);
    clip-path: polygon(100% 70%, 100% calc(70% + 2px), calc(75% + 3px) 100%, calc(75% - 3px) 100%);
  }

  &::after {
    -webkit-clip-path: polygon(100% 0, 100% 75%, 70% 100%, 0 100%, 0 0);
    clip-path: polygon(100% 0, 100% 75%, 75% 100%, 0 100%, 0 0);
  }
}

.ds__button__bottom-left {
  &:hover {
    &::after {
      -webkit-clip-path: polygon(0 0, 100% 0, 100% 100%, 30% 100%, 0 100%);
      clip-path: polygon(0 0, 100% 0, 100% 100%, 30% 100%, 0 100%);
    }

    &::before {
      -webkit-clip-path: polygon(0 100%, 0 100%, 0 100%, 0 100%);
      clip-path: polygon(0 100%, 0 100%, 0 100%, 0 100%);
    }
  }

  &::before {
    left: -4px;
    top: 0px;
    -webkit-clip-path: polygon(0 75%, calc(30% + 4px) 100%, calc(30% - 4px) 100%, 0 calc(75% + 2px));
    clip-path: polygon(0 75%, calc(30% + 4px) 100%, calc(30% - 4px) 100%, 0 calc(75% + 2px));
  }

  &::after {
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 100%, 30% 100%, 0 calc(75% + 3px));
    clip-path: polygon(0 0, 100% 0, 100% 100%, 30% 100%, 0 calc(75% + 3px));
  }
}